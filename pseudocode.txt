for (int i=0; i<8; i++)
{
	if (preferenece[m][i] != 0) {
		callfunction(preferenece, )
	}
}


loop 0-5 for 5 days
	loop 0-8 for 8 hours a day
		if (preferenece[i][m] == 0)
			loop 0-? for courses
				if (lecturer teaches that course && still have hour left && haven't taught that course today)
					call function?

//recursion or iteration?
recursion: slower and less efficient, but easier to generate all the different permutations
iteration: faster and much more efficient, but much harder to generate all the different permutations



using map or vector of maps instead? map a lecturer with all the hours they can teach that a week
or tuple?
map<string, int> teachingHours;			//string = lecturer name + hour, int = course to take


eliminate room: probably the easiest part
loop 0-40 for 40 hours/week
	if > 2 classes runnning at a time -> invalid:
		return;
	else:
		move on to checking preference



for day in range 5:		//5 days a week
	for session in range 8:		//8 hours a day
		for duration in range min(hour + 1, 3):		//either 0 hour, 1 hour or 2 hours being taught that day, as long as the course have enough time for it



generate as binary tree?

lecturer 1
	///
	free to teach? yes, move one. no, stop
		teach or not? yes, move on. no, stop
			///
			teach course 1 or not? yes, mod to course 1 then move on. no, move on
				teach course 2 or not? yes, mod to course 2 then move one. no, move on
					... do the same for all the courses that that lecturer teach
					(will it blow the stack? looks like it will)
			


			


