for (int i=0; i<8; i++)
{
	if (preferenece[m][i] != 0) {
		callfunction(preferenece, )
	}
}


loop 0-5 for 5 days
	loop 0-8 for 8 hours a day
		if (preferenece[i][m] == 0)
			loop 0-? for courses
				if (lecturer teaches that course && still have hour left && haven't taught that course today)
					call function?

//recursion or iteration?
recursion: slower and less efficient, but easier to generate all the different permutations
iteration: faster and much more efficient, but much harder to generate all the different permutations



using map or vector of maps instead? map a lecturer with all the hours they can teach that a week
or tuple?
map<string, int> teachingHours;			//string = lecturer name + hour, int = course to take


eliminate room: probably the easiest part
loop 0-40 for 40 hours/week
	if > 2 classes runnning at a time -> invalid:
		return;
	else:
		move on to checking preference



for day in range 5:		//5 days a week
	for session in range 8:		//8 hours a day
		for duration in range min(hour + 1, 3):		//either 0 hour, 1 hour or 2 hours being taught that day, as long as the course have enough time for it



generate as binary tree?
lecturer 1
	///(hour of the day)
	free to teach? yes, move one. no, stop
		teach or not? yes, move on. no, stop
			///
			teach course 1 or not? yes, mod to course 1 then move on. no, move on
				if next hour is free, teach 1 hour or 2 hours? if 1, sub 1, else, sub 2. subtract remaining hours with that value
				(if the next hour is not lunch break or end of day, change it to busy so you cannot teach. lunch % 8 = 3. end of day % 8 = 0)
					///
					do the same with every other courses. if you get to the last day of the week and you haven't taught every courses yet, the option is out
						///
(yep, this one works)
some small problem atm: options that doesn't teach all the 


			


